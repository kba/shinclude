#!/bin/bash

## Renders a file to markdown using a [shell expression](#render_ext).

## The render method is determined by the file extension, see 
## [RENDER STYLES](#render-styles) for a list of render methods

set -e

SHRENDERSHARE="$(dirname "$0")"
# logging
PATH="$PATH:$SHRENDERSHARE/deps/bin"
source "$(which shlog)"


typeset -axg SHRENDER_PATH=("$PWD")
export OUTPUT_PREFIX OUTPUT_SUFFIX INPUT_PREFIX INPUT_SUFFIX COLUMNIZE COLUMN_CHAR SHRENDER_DEFAULT_PREFIX


##
## ## RENDER STYLES
##

# Extension to render function (default is prefix)
declare -Agx EXT_TO_RENDER_FUNC
declare -Agx EXT_TO_RENDER_PREFIX

## ### cat
##
## File Extensions:
##
## * `*.md`
## * `*.markdown`
## * `*.ronn`
## * `*.txt`
##
EXT_TO_RENDER_FUNC[md]="cat"
EXT_TO_RENDER_FUNC[markdown]="cat"
EXT_TO_RENDER_FUNC[ronn]="cat"
EXT_TO_RENDER_FUNC[txt]="cat"

## ### prefix
## 
SHRENDER_DEFAULT_PREFIX='## \?'

## ### prefix/cstyle
##
## File Extensions:
##
## * `*.java`
## * `*.cpp`
## * `*.js`
EXT_TO_RENDER_PREFIX[java]="\*\* \?"
EXT_TO_RENDER_PREFIX[cpp]="\*\* \?"
EXT_TO_RENDER_PREFIX[js]="\* "

## ### prefix/doublepound
##
##   * Prefix comments to render with `##`
##   * Replace `__CURLINE__` with current line
##   * Replace `__CURLINE__` with current line
##
## File Extensions:
##
##   * `*.sh`
##   * `*.zsh`
##   * `*.bash`
##
EXT_TO_RENDER_PREFIX[sh]="$SHRENDER_DEFAULT_PREFIX"
EXT_TO_RENDER_PREFIX[zsh]="$SHRENDER_DEFAULT_PREFIX"
EXT_TO_RENDER_PREFIX[bash]="$SHRENDER_DEFAULT_PREFIX"

## ### jade
##
## Render style:
##
##   * Run through `jade` template engine
##
## Extensions:
##
##   * `*.jade`
##   * `*.pug`
##
EXT_TO_RENDER_FUNC[jade]="jade"
EXT_TO_RENDER_FUNC[pug]="jade"

## ### makefile-parser
##
## Render style:
##
##   * Run through `makefile-parser --make-help`
##
## Extensions:
##
##   * `*.mk`
##   * `Makefile`
##
EXT_TO_RENDER_FUNC[mk]="makefile-parser"
EXT_TO_RENDER_FUNC[Makefile]="makefile-parser"

# vim: ft=sh
shrender::util::resolve_file() {
    local f=$1
    if [[ -e "$f" ]];then
        echo "$f"
        return
    fi
    for dir in "${SHRENDER_PATH[@]}";do
        fabs="$dir/$f"
        if [[ -e "$fabs" ]];then
            echo "$fabs"
            return
        fi
    done
    shlog -l error -x 2 "No file found in includes: $renderfile"
}
shrender::util::load_profile () {
    for profile in "$SHRENDERSHARE/shrender.profile" "/etc/default/shrender" "$PWD/.shrenderrc";do
        if [[ -e "$profile" ]];then source "$profile";fi
    done
    return
}
## ### makefile-parser
shrender::func::makefile-parser () {
    makefile-parser --make-help "$1"
}
shrender::func::jade () {
    export SHRENDER_JADE=${SHRENDER_JADE:-jade}
    [[ -z "$1" ]] && { shrender::usage; exit; }
    jadeBinary=
    if which pug >/dev/null;then
        jadeBinary="pug"
    elif which jade >/dev/null;then
        jadeBinary="jade"
    fi
    if [[ ! -z "$jadeBinary" ]];then
        shlog -l debug "jade command: $jadeBinary -p $2 -P < $1 (PWD: $PWD)"
        jadeOutput=$($jadeBinary -p "$2" -P < "$1")
    else
        shlog -l warn "jade/pug not installed, echoing input"
        jadeOutput=$(echo -ne "\n"; cat "$1")
    fi
    echo "$jadeOutput"| sed -n -e '2,$p' -e '$a \\n'
}
shrender::func::cat () {
    cat "$1"
}
shrender::func::prefix () {
    while [[ "$1" = -* ]];do
        case "$1" in
            *) shlog -l error -x 7 "Unknown option '$1' to shrender::prefix" ;;
        esac
        shift
    done
    [[ -z "$1" ]] && { shrender::usage; exit; }
    shlog -l trace "Rendering '$1'"
    local renderfile="$1"
    if [[ -z "$INPUT_PREFIX" ]];then
        local ext=${renderfile##*/}
        ext=${ext##*.}
        shlog -l debug "Derive render prefix from extension '$ext'"
        INPUT_PREFIX="${EXT_TO_RENDER_PREFIX[$ext]}"
    fi
    if [[ -z "$INPUT_PREFIX" ]];then
        shlog -l debug "Cannot derive render prefix from '$ext'."
        shlog -l debug "Falling back to renderprefix='##'."
        shlog -l debug "Define EXT_TO_RENDER_PREFIX[$ext]='...' to override.\n"
        INPUT_PREFIX=$SHRENDER_DEFAULT_PREFIX
    fi
    shlog -l info "Rendering '$renderfile' by prefix '$INPUT_PREFIX'"
    grep "^\s*$INPUT_PREFIX" "$1" | sed "s,^\s*${INPUT_PREFIX},,"
}

shrender() {
    local renderfile renderfunc renderfile_abs 
    #help:
    #help:Usage: shrender [opts...] [render-opts] <file-to-render>...
    #help:  
    #help:    Options:
    #help:  
    while [[ "$1" = -* ]];do
        case "$1" in
            #help:\t-h  --help         Show help
            -h|--help) shrender::usage; shift ;;
            #help:\t-f  --function FUNC         Render function
            -f|--func*) renderfunc="$2"; shift ;;
            #help:\t-p  --path PATH             Add path to shrenders search path
            -p|--path) SHRENDER_PATH+=("$2"); shift ;;
            #help:\t-c  --column CHAR           Columnize at this char.
            -c|--column) COLUMNIZE=true; COLUMN_CHAR="$2"; shift ;;
            #help:\t-ip --input-prefix PREFIX   The pattern to filter input lines with.
            -ip|--input-prefix) INPUT_PREFIX="$2"; shift ;;
            #help:\t-is --input-suffix SUFFIX   Optional suffix in input lines to be removed
            -is|--input-suffix) INPUT_SUFFIX="$2"; shift ;;
            #help:\t-op --output-prefix PREFIX  Prepend output lines with this string.
            -op|--output-prefix) OUTPUT_PREFIX="$2"; shift ;;
            #help:\t-os --output-suffix SUFFIX  Append this string to output lines.
            -os|--output-suffix) OUTPUT_SUFFIX+="$2"; shift ;;
            *) shlog -l error -x 87 "No such option '$1'" ;;
        esac
        shift
    done
    [[ -z "$1" ]] && { shrender::usage; exit; }
    shrender::util::load_profile 

    for renderfile in "$@";do
        renderfile_abs=$(shrender::util::resolve_file "$renderfile")
        if (( $? > 0 ));then
            shlog -l error -x $? "Failed to resolve '$renderfile'"
        fi
        if [[ -z "$renderfunc" ]];then
            renderfunc="$(shrender::function_for_extension "$renderfile")"
        fi
        if ! declare -f "shrender::func::$renderfunc" >/dev/null;then
            shlog -l error -x 7 "No such render function '$renderfunc'."
        fi
        shlog -l debug "Rendering $renderfile_abs"
        shlog -l info "shrender::func::$renderfunc '$renderfile_abs'"
        tempfile=$(mktemp --tmpdir "shrender.XXXXX.$(basename "$renderfile"|sed 's/.*\.//')")
        # shellcheck disable=2064
        trap "rm $tempfile" EXIT INT TERM
        # Replace the string __CURLINE__ in the file being rendered with the line number where it occurs
        awk "{
            gsub(\"__CURLINE__\",NR,\$0);
            print
        }" < "$renderfile_abs" > "$tempfile"
        # Replace the string __CURFILE__  with the name of the file being rendered
        sed -i "s,__CURFILE__,$renderfile," "$tempfile"
        output=$(
            local IFS=$'\n'
            local line;
            "shrender::func::$renderfunc" "$tempfile" "$renderfile_abs" |while read -r line;do
                printf "%s%s%s\n" "$OUTPUT_PREFIX" "$line" "$OUTPUT_SUFFIX"
            done)
        if [[ ! -z "$COLUMN_CHAR" ]];then
            output=$(echo "$output" |column -ets"$COLUMN_CHAR")
        fi
        if (( $? > 0 ));then
            shlog -l error -x 7 "Rendering failed: $output"
        fi
        echo -e "$output"
    done
}

shrender::usage () {
    local SHLOG_SILENT
    (SHLOG_SILENT=true bash "$0" -ip '#help:' "$0")
}

shrender::function_for_extension() {
    local f="$1"
    local ext=$(basename "$f"|sed 's/.*\.//')
    shlog -l debug "Detecting render function by extension '$ext'"
    local renderfunc="${EXT_TO_RENDER_FUNC[$ext]}"
    if [[ -z "$renderfunc" ]];then
        shlog -l trace "Default to 'prefix' render function"
        renderfunc='prefix'
    fi
    echo "$renderfunc"
}

if [[ "${BASH_SOURCE[0]}" = "$0" ]];then
    shrender "$@"
else
    export -f shrender
fi

